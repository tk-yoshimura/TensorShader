using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using TensorShader;
using static TensorShader.Field;

namespace TensorShaderTest.Links.QuaternionConvolution {
    [TestClass]
    public class QuaternionDeconvolution2DTest {
        [TestMethod]
        public void ReferenceTest() {
            int inchannels = 8, outchannels = 12, kwidth = 3, kheight = 5, stride = 2, inwidth = 7, inheight = 8;
            int outwidth = (inwidth - kwidth) / stride + 1, outheight = (inheight - kheight) / stride + 1, batch = 3;

            float[] xval = (new float[inwidth * inheight * inchannels * batch]).Select((_, idx) => idx * 1e-3f).ToArray();
            float[] yval = (new float[outwidth * outheight * outchannels * batch]).Select((_, idx) => idx * 1e-3f).ToArray();
            float[] wval = (new float[kwidth * kheight * outchannels * inchannels / 4]).Select((_, idx) => idx * 1e-3f).Reverse().ToArray();

            Tensor xtensor = new Tensor(Shape.Map2D(inchannels, inwidth, inheight, batch), xval);
            Tensor ytensor = new Tensor(Shape.Map2D(outchannels, outwidth, outheight, batch), yval);
            Tensor wtensor = new Tensor(Shape.Kernel2D(inchannels, outchannels / 4, kwidth, kheight), wval);

            VariableField x_actual = xtensor;
            ParameterField w = wtensor;
            ParameterField y = ytensor;

            Field x_expect = QuaternionDeconvolution2D(y, w, stride, Shape.Map2D(inchannels, inwidth, inheight, batch));
            Field err = x_expect - x_actual;

            (Flow flow, Parameters Parameters) = Flow.Optimize(err);

            flow.Execute();

            float[] gy_actual = y.GradTensor.State;
            float[] gw_actual = w.GradTensor.State;

            AssertError.Tolerance(gy_expect, gy_actual, 1e-7f, 1e-5f, $"not equal gy");

            AssertError.Tolerance(gw_expect, gw_actual, 1e-6f, 1e-4f, $"not equal gw"); /*backward tolerance*/
        }

        [TestMethod]
        public void TheoreticalTest() {
            int inchannels = 8, outchannels = 12, kwidth = 3, kheight = 5, stride = 2, inwidth = 7, inheight = 8;
            int outwidth = (inwidth - kwidth) / stride + 1, outheight = (inheight - kheight) / stride + 1, batch = 3;

            float[] xval = (new float[inwidth * inheight * inchannels * batch]).Select((_, idx) => idx * 1e-3f).ToArray();
            float[] yval = (new float[outwidth * outheight * outchannels * batch]).Select((_, idx) => idx * 1e-3f).ToArray();
            float[] wval = (new float[kwidth * kheight * outchannels * inchannels / 4]).Select((_, idx) => idx * 1e-3f).Reverse().ToArray();

            Tensor xtensor = new Tensor(Shape.Map2D(inchannels, inwidth, inheight, batch), xval);
            Tensor ytensor = new Tensor(Shape.Map2D(outchannels, outwidth, outheight, batch), yval);
            Tensor wtensor = new Tensor(Shape.Kernel2D(inchannels, outchannels / 4, kwidth, kheight), wval);

            VariableField x_actual = xtensor;
            ParameterField w = wtensor;
            ParameterField y = ytensor;

            Field yr = QuaternionR(y), yi = QuaternionI(y), yj = QuaternionJ(y), yk = QuaternionK(y);
            Field wr = QuaternionR(w), wi = QuaternionI(w), wj = QuaternionJ(w), wk = QuaternionK(w);

            Shape outshape = Shape.Map2D(inchannels / 4, inwidth, inheight, batch);

            Field xr = Deconvolution2D(yr, wr, stride, outshape) - Deconvolution2D(yi, wi, stride, outshape) - Deconvolution2D(yj, wj, stride, outshape) - Deconvolution2D(yk, wk, stride, outshape);
            Field xi = Deconvolution2D(yr, wi, stride, outshape) + Deconvolution2D(yi, wr, stride, outshape) + Deconvolution2D(yj, wk, stride, outshape) - Deconvolution2D(yk, wj, stride, outshape);
            Field xj = Deconvolution2D(yr, wj, stride, outshape) - Deconvolution2D(yi, wk, stride, outshape) + Deconvolution2D(yj, wr, stride, outshape) + Deconvolution2D(yk, wi, stride, outshape);
            Field xk = Deconvolution2D(yr, wk, stride, outshape) + Deconvolution2D(yi, wj, stride, outshape) - Deconvolution2D(yj, wi, stride, outshape) + Deconvolution2D(yk, wr, stride, outshape);

            Field x_expect = QuaternionCast(xr, xi, xj, xk);

            Field err = x_expect - x_actual;

            (Flow flow, Parameters Parameters) = Flow.Optimize(err);

            flow.Execute();

            float[] gy_actual = y.GradTensor.State;
            float[] gw_actual = w.GradTensor.State;

            AssertError.Tolerance(gy_expect, gy_actual, 1e-7f, 1e-5f, $"not equal gy");

            AssertError.Tolerance(gw_expect, gw_actual, 1e-6f, 1e-4f, $"not equal gw"); /*backward tolerance*/
        }

        float[] gy_expect = new float[] {
            -1.261343232e+00f,  5.514557760e-01f,  5.966188160e-01f,  5.915403520e-01f,  -1.173691648e+00f,  5.201334080e-01f,
            5.632497280e-01f,  5.579424000e-01f,  -1.086040064e+00f,  4.888110400e-01f,  5.298806400e-01f,  5.243444480e-01f,
            -1.136352528e+00f,  1.045480944e+00f,  1.097816176e+00f,  1.099300880e+00f,  -1.054970384e+00f,  9.925590880e-01f,
            1.042363760e+00f,  1.043437584e+00f,  -9.735882400e-01f,  9.396372320e-01f,  9.869113440e-01f,  9.875742880e-01f,
            -1.403657472e+00f,  1.127820576e+00f,  1.175170880e+00f,  1.166796160e+00f,  -1.306114048e+00f,  1.076075552e+00f,
            1.121231680e+00f,  1.112812416e+00f,  -1.208570624e+00f,  1.024330528e+00f,  1.067292480e+00f,  1.058828672e+00f,
            -3.339172224e+00f,  9.804786240e-01f,  1.036743872e+00f,  1.016469760e+00f,  -3.146046592e+00f,  9.476079680e-01f,
            1.002047680e+00f,  9.819317760e-01f,  -2.952920960e+00f,  9.147373120e-01f,  9.673514880e-01f,  9.473937920e-01f,
            -3.116681712e+00f,  1.566664080e+00f,  1.632648592e+00f,  1.616839856e+00f,  -2.926189808e+00f,  1.515954064e+00f,
            1.579684496e+00f,  1.563948720e+00f,  -2.735697904e+00f,  1.465244048e+00f,  1.526720400e+00f,  1.511057584e+00f,
            -3.519474816e+00f,  1.512883104e+00f,  1.573658048e+00f,  1.547433472e+00f,  -3.309821824e+00f,  1.466225312e+00f,
            1.525027264e+00f,  1.499145216e+00f,  -3.100168832e+00f,  1.419567520e+00f,  1.476396480e+00f,  1.450856960e+00f,
            -9.157676544e+00f,  2.717863968e+00f,  2.783492672e+00f,  2.727861376e+00f,  -8.734611712e+00f,  2.593201952e+00f,
            2.655899200e+00f,  2.600481408e+00f,  -8.311546880e+00f,  2.468539936e+00f,  2.528305728e+00f,  2.473101440e+00f,
            -8.476401168e+00f,  3.768090864e+00f,  3.840947056e+00f,  3.791851280e+00f,  -8.079954704e+00f,  3.601812208e+00f,
            3.671031920e+00f,  3.622078224e+00f,  -7.683508240e+00f,  3.435533552e+00f,  3.501116784e+00f,  3.452305168e+00f,
            -9.267476736e+00f,  3.322761504e+00f,  3.393231680e+00f,  3.332977024e+00f,  -8.829211648e+00f,  3.182985248e+00f,
            3.250376512e+00f,  3.190519680e+00f,  -8.390946560e+00f,  3.043208992e+00f,  3.107521344e+00f,  3.048062336e+00f,
            -1.121460365e+01f,  3.149872800e+00f,  3.238547648e+00f,  3.161748736e+00f,  -1.066217690e+01f,  3.047550368e+00f,
            3.133514944e+00f,  3.057316608e+00f,  -1.010975014e+01f,  2.945227936e+00f,  3.028482240e+00f,  2.952884480e+00f,
            -1.047539275e+01f,  4.248216720e+00f,  4.349652112e+00f,  4.275797936e+00f,  -9.939976688e+00f,  4.114009744e+00f,
            4.212085136e+00f,  4.138856880e+00f,  -9.404560624e+00f,  3.979802768e+00f,  4.074518160e+00f,  4.001915824e+00f,
            -1.143405581e+01f,  3.639146400e+00f,  3.734985152e+00f,  3.650908672e+00f,  -1.085979328e+01f,  3.528345248e+00f,
            3.621326272e+00f,  3.538034688e+00f,  -1.028553075e+01f,  3.417544096e+00f,  3.507667392e+00f,  3.425160704e+00f,
            -1.705400986e+01f,  4.884272160e+00f,  4.970366528e+00f,  4.864182400e+00f,  -1.629553178e+01f,  4.666270496e+00f,
            4.748548672e+00f,  4.643020416e+00f,  -1.553705370e+01f,  4.448268832e+00f,  4.526730816e+00f,  4.421858432e+00f,
            -1.581644981e+01f,  6.490700784e+00f,  6.584077936e+00f,  6.484401680e+00f,  -1.510493902e+01f,  6.211065328e+00f,
            6.299700080e+00f,  6.200718864e+00f,  -1.439342824e+01f,  5.931429872e+00f,  6.015322224e+00f,  5.917036048e+00f,
            -1.713129600e+01f,  5.517702432e+00f,  5.611292480e+00f,  5.499157888e+00f,  -1.635230925e+01f,  5.289894944e+00f,
            5.379521344e+00f,  5.268226944e+00f,  -1.557332250e+01f,  5.062087456e+00f,  5.147750208e+00f,  5.037296000e+00f,
            -1.909003507e+01f,  5.319266976e+00f,  5.440351424e+00f,  5.307027712e+00f,  -1.817830720e+01f,  5.147492768e+00f,
            5.264982208e+00f,  5.132701440e+00f,  -1.726657933e+01f,  4.975718560e+00f,  5.089612992e+00f,  4.958375168e+00f,
            -1.783410379e+01f,  6.929769360e+00f,  7.066655632e+00f,  6.934756016e+00f,  -1.695376357e+01f,  6.712065424e+00f,
            6.844485776e+00f,  6.713765040e+00f,  -1.607342334e+01f,  6.494361488e+00f,  6.622315920e+00f,  6.492774064e+00f,
            -1.934863680e+01f,  5.765409696e+00f,  5.896312256e+00f,  5.754383872e+00f,  -1.840976474e+01f,  5.590465184e+00f,
            5.717625280e+00f,  5.576924160e+00f,  -1.747089267e+01f,  5.415520672e+00f,  5.538938304e+00f,  5.399464448e+00f,
        };

        float[] gw_expect = new float[] {
            -3.246160770e+00f,  2.264774940e+00f,  2.288190618e+00f,  2.262633048e+00f,  -3.307795722e+00f,  2.232892692e+00f,
            2.256568722e+00f,  2.230922448e+00f,  -3.335168250e+00f,  2.326959540e+00f,  2.350489410e+00f,  2.323639008e+00f,
            -3.398798466e+00f,  2.294216748e+00f,  2.317998330e+00f,  2.291076504e+00f,  -3.424175730e+00f,  2.389144140e+00f,
            2.412788202e+00f,  2.384644968e+00f,  -3.489801210e+00f,  2.355540804e+00f,  2.379427938e+00f,  2.351230560e+00f,
            -4.232414718e+00f,  1.339489764e+00f,  1.365723558e+00f,  1.344878856e+00f,  -4.281402870e+00f,  1.320288876e+00f,
            1.346800302e+00f,  1.325832336e+00f,  -4.348028934e+00f,  1.376956044e+00f,  1.403133822e+00f,  1.381580352e+00f,
            -4.398687486e+00f,  1.357226388e+00f,  1.383676614e+00f,  1.362010248e+00f,  -4.463643150e+00f,  1.414422324e+00f,
            1.440544086e+00f,  1.418281848e+00f,  -4.515972102e+00f,  1.394163900e+00f,  1.420552926e+00f,  1.398188160e+00f,
            -3.438102690e+00f,  2.189097180e+00f,  2.212148538e+00f,  2.188962072e+00f,  -3.499851690e+00f,  2.157142356e+00f,
            2.180474802e+00f,  2.157158160e+00f,  -3.530899098e+00f,  2.252049012e+00f,  2.275183458e+00f,  2.250735264e+00f,
            -3.594684834e+00f,  2.219192172e+00f,  2.242599066e+00f,  2.218037976e+00f,  -3.623695506e+00f,  2.315000844e+00f,
            2.338218378e+00f,  2.312508456e+00f,  -3.689517978e+00f,  2.281241988e+00f,  2.304723330e+00f,  2.278917792e+00f,
            -4.236357906e+00f,  1.690894476e+00f,  1.717844490e+00f,  1.691266248e+00f,  -4.297992858e+00f,  1.659012228e+00f,
            1.686222594e+00f,  1.659555648e+00f,  -4.356672138e+00f,  1.737589284e+00f,  1.764497970e+00f,  1.736937936e+00f,
            -4.420302354e+00f,  1.704846492e+00f,  1.732006890e+00f,  1.704375432e+00f,  -4.476986370e+00f,  1.784284092e+00f,
            1.811151450e+00f,  1.782609624e+00f,  -4.542611850e+00f,  1.750680756e+00f,  1.777791186e+00f,  1.749195216e+00f,
            -4.994969454e+00f,  9.938737800e-01f,  1.023952950e+00f,  1.001465496e+00f,  -5.043957606e+00f,  9.746728920e-01f,
            1.005029694e+00f,  9.824189760e-01f,  -5.136042870e+00f,  1.021822236e+00f,  1.051752078e+00f,  1.028742480e+00f,
            -5.186701422e+00f,  1.002092580e+00f,  1.032294870e+00f,  1.009172376e+00f,  -5.277116286e+00f,  1.049770692e+00f,
            1.079551206e+00f,  1.056019464e+00f,  -5.329445238e+00f,  1.029512268e+00f,  1.059560046e+00f,  1.035925776e+00f,
            -4.430352690e+00f,  1.613910348e+00f,  1.640869290e+00f,  1.615915656e+00f,  -4.492101690e+00f,  1.581955524e+00f,
            1.609195554e+00f,  1.584111744e+00f,  -4.555202346e+00f,  1.660625892e+00f,  1.687512402e+00f,  1.661608080e+00f,
            -4.618988082e+00f,  1.627769052e+00f,  1.654928010e+00f,  1.628910792e+00f,  -4.680052002e+00f,  1.707341436e+00f,
            1.734155514e+00f,  1.707300504e+00f,  -4.745874474e+00f,  1.673582580e+00f,  1.700660466e+00f,  1.673709840e+00f,
            -4.367520504e+00f,  1.969255344e+00f,  1.995025464e+00f,  1.969082304e+00f,  -4.439519064e+00f,  1.927060176e+00f,
            1.953115992e+00f,  1.927033440e+00f,  -4.490054808e+00f,  2.029932240e+00f,  2.055656856e+00f,  2.028477600e+00f,
            -4.564398840e+00f,  1.986520560e+00f,  2.012519352e+00f,  1.985223744e+00f,  -4.612589112e+00f,  2.090609136e+00f,
            2.116288248e+00f,  2.087872896e+00f,  -4.689278616e+00f,  2.045980944e+00f,  2.071922712e+00f,  2.043414048e+00f,
            -5.251184712e+00f,  1.150257744e+00f,  1.181222856e+00f,  1.158364224e+00f,  -5.306369256e+00f,  1.124895024e+00f,
            1.156155048e+00f,  1.133138592e+00f,  -5.400208296e+00f,  1.186423344e+00f,  1.217233512e+00f,  1.193703264e+00f,
            -5.457277512e+00f,  1.160314128e+00f,  1.191412296e+00f,  1.167738048e+00f,  -5.549231880e+00f,  1.222588944e+00f,
            1.253244168e+00f,  1.229042304e+00f,  -5.608185768e+00f,  1.195733232e+00f,  1.226669544e+00f,  1.202337504e+00f,
            -4.599126648e+00f,  1.854458544e+00f,  1.880146872e+00f,  1.856105664e+00f,  -4.671111384e+00f,  1.812332496e+00f,
            1.838334168e+00f,  1.814098272e+00f,  -4.726669848e+00f,  1.914665424e+00f,  1.940266776e+00f,  1.915030944e+00f,
            -4.801055352e+00f,  1.871267568e+00f,  1.897170744e+00f,  1.871763264e+00f,  -4.854213048e+00f,  1.974872304e+00f,
            2.000386680e+00f,  1.973956224e+00f,  -4.930999320e+00f,  1.930202640e+00f,  1.956007320e+00f,  1.929428256e+00f,
            -5.472069714e+00f,  1.284963516e+00f,  1.317498282e+00f,  1.291772664e+00f,  -5.533803162e+00f,  1.253086452e+00f,
            1.285933410e+00f,  1.260015408e+00f,  -5.630513418e+00f,  1.325551572e+00f,  1.357915410e+00f,  1.331389440e+00f,
            -5.694345810e+00f,  1.292710284e+00f,  1.325377674e+00f,  1.298676600e+00f,  -5.788957122e+00f,  1.366139628e+00f,
            1.398332538e+00f,  1.371006216e+00f,  -5.854888458e+00f,  1.332334116e+00f,  1.364821938e+00f,  1.337337792e+00f,
            -6.073754670e+00f,  7.470492840e-01f,  7.838355420e-01f,  7.600415760e-01f,  -6.122727270e+00f,  7.279261560e-01f,
            7.650211500e-01f,  7.410417120e-01f,  -6.250832118e+00f,  7.711097400e-01f,  8.076689100e-01f,  7.834616640e-01f,
            -6.301537326e+00f,  7.513956360e-01f,  7.882583580e-01f,  7.638760080e-01f,  -6.427909566e+00f,  7.951701960e-01f,
            8.315022780e-01f,  8.068817520e-01f,  -6.480347382e+00f,  7.748651160e-01f,  8.114955660e-01f,  7.867103040e-01f,
            -5.677261938e+00f,  1.197590652e+00f,  1.230569802e+00f,  1.205784504e+00f,  -5.738860602e+00f,  1.165889844e+00f,
            1.199201922e+00f,  1.174182768e+00f,  -5.840987562e+00f,  1.237452948e+00f,  1.270230066e+00f,  1.244675520e+00f,
            -5.904726642e+00f,  1.204746444e+00f,  1.237847850e+00f,  1.212076728e+00f,  -6.004713186e+00f,  1.277315244e+00f,
            1.309890330e+00f,  1.283566536e+00f,  -6.070592682e+00f,  1.243603044e+00f,  1.276493778e+00f,  1.249970688e+00f,
            -6.464039778e+00f,  7.111763640e-01f,  7.481785860e-01f,  7.195660560e-01f,  -6.525773226e+00f,  6.792993000e-01f,
            7.166137140e-01f,  6.878088000e-01f,  -6.655656474e+00f,  7.344083880e-01f,  7.710841620e-01f,  7.419823200e-01f,
            -6.719488866e+00f,  7.015671000e-01f,  7.385464260e-01f,  7.092694800e-01f,  -6.847273170e+00f,  7.576404120e-01f,
            7.939897380e-01f,  7.643985840e-01f,  -6.913204506e+00f,  7.238349000e-01f,  7.604791380e-01f,  7.307301600e-01f,
            -6.836029470e+00f,  4.028329800e-01f,  4.440244860e-01f,  4.174680240e-01f,  -6.885002070e+00f,  3.837098520e-01f,
            4.252100940e-01f,  3.984681600e-01f,  -7.039685862e+00f,  4.162558680e-01f,  4.571269740e-01f,  4.303438560e-01f,
            -7.090391070e+00f,  3.965417640e-01f,  4.377164220e-01f,  4.107582000e-01f,  -7.243342254e+00f,  4.296787560e-01f,
            4.702294620e-01f,  4.432196880e-01f,  -7.295780070e+00f,  4.093736760e-01f,  4.502227500e-01f,  4.230482400e-01f,
            -6.666805890e+00f,  6.269761080e-01f,  6.647959620e-01f,  6.363772560e-01f,  -6.728404554e+00f,  5.952753000e-01f,
            6.334280820e-01f,  6.047755200e-01f,  -6.864451002e+00f,  6.487358760e-01f,  6.861981780e-01f,  6.573212640e-01f,
            -6.928190082e+00f,  6.160293720e-01f,  6.538159620e-01f,  6.247224720e-01f,  -7.062096114e+00f,  6.704956440e-01f,
            7.076003940e-01f,  6.782652720e-01f,  -7.127975610e+00f,  6.367834440e-01f,  6.742038420e-01f,  6.446694240e-01f,
        };
    }
}
