using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using TensorShader;
using static TensorShader.Field;

namespace TensorShaderTest.Links.Connection3D {
    [TestClass]
    public class NeighborZoomTest {
        [TestMethod]
        public void ReferenceTest() {
            int scale = 2;
            int channels = 2, inwidth = 5, inheight = 4, indepth = 3, batch = 2;
            int outwidth = inwidth * scale, outheight = inheight * scale, outdepth = indepth * scale;

            float[] xval = (new float[channels * inwidth * inheight * indepth * batch]).Select((_, idx) => idx * 2e-3f).ToArray();
            float[] yval = (new float[channels * outwidth * outheight * outdepth * batch]).Select((_, idx) => idx * 1e-3f).ToArray();

            Tensor xtensor = new Tensor(Shape.Map3D(channels, inwidth, inheight, indepth, batch), xval);
            Tensor ytensor = new Tensor(Shape.Map3D(channels, outwidth, outheight, outdepth, batch), yval);

            ParameterField x = xtensor;
            VariableField y_actual = ytensor;

            Field y_expect = NeighborZoom3D(x);
            Field err = y_expect - y_actual;

            (Flow flow, Parameters Parameters) = Flow.Optimize(err);

            flow.Execute();

            float[] gx_actual = x.GradTensor.State;

            AssertError.Tolerance(gx_expect, gx_actual, 1e-7f, 1e-5f, $"not equal gx");
        }

        float[] gx_expect = {
            -9.100000e-02f, -9.000000e-02f, -9.100000e-02f, -9.000000e-02f, -9.100000e-02f, -9.000000e-02f, -9.100000e-02f, -9.000000e-02f,
            -9.100000e-02f, -9.000000e-02f, -1.110000e-01f, -1.100000e-01f, -1.110000e-01f, -1.100000e-01f, -1.110000e-01f, -1.100000e-01f,
            -1.110000e-01f, -1.100000e-01f, -1.110000e-01f, -1.100000e-01f, -1.310000e-01f, -1.300000e-01f, -1.310000e-01f, -1.300000e-01f,
            -1.310000e-01f, -1.300000e-01f, -1.310000e-01f, -1.300000e-01f, -1.310000e-01f, -1.300000e-01f, -1.510000e-01f, -1.500000e-01f,
            -1.510000e-01f, -1.500000e-01f, -1.510000e-01f, -1.500000e-01f, -1.510000e-01f, -1.500000e-01f, -1.510000e-01f, -1.500000e-01f,
            -3.310000e-01f, -3.300000e-01f, -3.310000e-01f, -3.300000e-01f, -3.310000e-01f, -3.300000e-01f, -3.310000e-01f, -3.300000e-01f,
            -3.310000e-01f, -3.300000e-01f, -3.510000e-01f, -3.500000e-01f, -3.510000e-01f, -3.500000e-01f, -3.510000e-01f, -3.500000e-01f,
            -3.510000e-01f, -3.500000e-01f, -3.510000e-01f, -3.500000e-01f, -3.710000e-01f, -3.700000e-01f, -3.710000e-01f, -3.700000e-01f,
            -3.710000e-01f, -3.700000e-01f, -3.710000e-01f, -3.700000e-01f, -3.710000e-01f, -3.700000e-01f, -3.910000e-01f, -3.900000e-01f,
            -3.910000e-01f, -3.900000e-01f, -3.910000e-01f, -3.900000e-01f, -3.910000e-01f, -3.900000e-01f, -3.910000e-01f, -3.900000e-01f,
            -5.710000e-01f, -5.700000e-01f, -5.710000e-01f, -5.700000e-01f, -5.710000e-01f, -5.700000e-01f, -5.710000e-01f, -5.700000e-01f,
            -5.710000e-01f, -5.700000e-01f, -5.910000e-01f, -5.900000e-01f, -5.910000e-01f, -5.900000e-01f, -5.910000e-01f, -5.900000e-01f,
            -5.910000e-01f, -5.900000e-01f, -5.910000e-01f, -5.900000e-01f, -6.110000e-01f, -6.100000e-01f, -6.110000e-01f, -6.100000e-01f,
            -6.110000e-01f, -6.100000e-01f, -6.110000e-01f, -6.100000e-01f, -6.110000e-01f, -6.100000e-01f, -6.310000e-01f, -6.300000e-01f,
            -6.310000e-01f, -6.300000e-01f, -6.310000e-01f, -6.300000e-01f, -6.310000e-01f, -6.300000e-01f, -6.310000e-01f, -6.300000e-01f,
            -8.110000e-01f, -8.100000e-01f, -8.110000e-01f, -8.100000e-01f, -8.110000e-01f, -8.100000e-01f, -8.110000e-01f, -8.100000e-01f,
            -8.110000e-01f, -8.100000e-01f, -8.310000e-01f, -8.300000e-01f, -8.310000e-01f, -8.300000e-01f, -8.310000e-01f, -8.300000e-01f,
            -8.310000e-01f, -8.300000e-01f, -8.310000e-01f, -8.300000e-01f, -8.510000e-01f, -8.500000e-01f, -8.510000e-01f, -8.500000e-01f,
            -8.510000e-01f, -8.500000e-01f, -8.510000e-01f, -8.500000e-01f, -8.510000e-01f, -8.500000e-01f, -8.710000e-01f, -8.700000e-01f,
            -8.710000e-01f, -8.700000e-01f, -8.710000e-01f, -8.700000e-01f, -8.710000e-01f, -8.700000e-01f, -8.710000e-01f, -8.700000e-01f,
            -1.051000e+00f, -1.050000e+00f, -1.051000e+00f, -1.050000e+00f, -1.051000e+00f, -1.050000e+00f, -1.051000e+00f, -1.050000e+00f,
            -1.051000e+00f, -1.050000e+00f, -1.071000e+00f, -1.070000e+00f, -1.071000e+00f, -1.070000e+00f, -1.071000e+00f, -1.070000e+00f,
            -1.071000e+00f, -1.070000e+00f, -1.071000e+00f, -1.070000e+00f, -1.091000e+00f, -1.090000e+00f, -1.091000e+00f, -1.090000e+00f,
            -1.091000e+00f, -1.090000e+00f, -1.091000e+00f, -1.090000e+00f, -1.091000e+00f, -1.090000e+00f, -1.111000e+00f, -1.110000e+00f,
            -1.111000e+00f, -1.110000e+00f, -1.111000e+00f, -1.110000e+00f, -1.111000e+00f, -1.110000e+00f, -1.111000e+00f, -1.110000e+00f,
            -1.291000e+00f, -1.290000e+00f, -1.291000e+00f, -1.290000e+00f, -1.291000e+00f, -1.290000e+00f, -1.291000e+00f, -1.290000e+00f,
            -1.291000e+00f, -1.290000e+00f, -1.311000e+00f, -1.310000e+00f, -1.311000e+00f, -1.310000e+00f, -1.311000e+00f, -1.310000e+00f,
            -1.311000e+00f, -1.310000e+00f, -1.311000e+00f, -1.310000e+00f, -1.331000e+00f, -1.330000e+00f, -1.331000e+00f, -1.330000e+00f,
            -1.331000e+00f, -1.330000e+00f, -1.331000e+00f, -1.330000e+00f, -1.331000e+00f, -1.330000e+00f, -1.351000e+00f, -1.350000e+00f,
            -1.351000e+00f, -1.350000e+00f, -1.351000e+00f, -1.350000e+00f, -1.351000e+00f, -1.350000e+00f, -1.351000e+00f, -1.350000e+00f,
        };
    }
}
