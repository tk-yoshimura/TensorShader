using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using TensorShader;
using static TensorShader.Field;

namespace TensorShaderTest.Links.TrivectorConvolution {
    [TestClass]
    public class TrivectorDeconvolution1DTest {
        [TestMethod]
        public void ReferenceTest() {
            int inchannels = 9, outchannels = 12, kwidth = 3, stride = 2, inwidth = 7;
            int outwidth = (inwidth - kwidth) / stride + 1, batch = 3;

            float[] xval = (new float[inwidth * inchannels * batch]).Select((_, idx) => idx * 1e-3f).ToArray();
            float[] yval = (new float[outwidth * outchannels * batch]).Select((_, idx) => idx * 1e-3f).ToArray();
            float[] wval = (new float[kwidth * outchannels * inchannels / 9 * 4]).Select((_, idx) => idx * 1e-3f).Reverse().ToArray();

            Tensor xtensor = new Tensor(Shape.Map1D(inchannels, inwidth, batch), xval);
            Tensor ytensor = new Tensor(Shape.Map1D(outchannels, outwidth, batch), yval);
            Tensor wtensor = new Tensor(Shape.Kernel1D(inchannels / 3 * 4, outchannels / 3, kwidth), wval);

            VariableField x_actual = xtensor;
            ParameterField w = wtensor;
            ParameterField y = ytensor;

            Field x_expect = TrivectorDeconvolution1D(y, w, stride, Shape.Map1D(inchannels, inwidth, batch));
            Field err = x_expect - x_actual;

            (Flow flow, Parameters Parameters) = Flow.Optimize(err);

            flow.Execute();

            float[] gy_actual = y.GradTensor.State;
            float[] gw_actual = w.GradTensor.State;

            AssertError.Tolerance(gw_expect, gw_actual, 1e-6f, 1e-5f, $"not equal gw");

            AssertError.Tolerance(gy_expect, gy_actual, 1e-6f, 1e-5f, $"not equal gy");
        }

        float[] gy_expect = new float[] {
            -2.283437103e-03f,  -2.572451984e-03f,  -1.726096484e-03f,  -1.674263485e-03f,  -1.903284629e-03f,  -1.231520132e-03f,
            -1.183437738e-03f,  -1.360837477e-03f,  -8.405391590e-04f,  -8.109598642e-04f,  -9.451105275e-04f,  -5.531535644e-04f,
            -7.736922000e-03f,  -8.024855064e-03f,  -7.000395973e-03f,  -5.981535103e-03f,  -6.209965535e-03f,  -5.385524211e-03f,
            -4.508068545e-03f,  -4.685314836e-03f,  -4.037054951e-03f,  -3.316522325e-03f,  -3.450902965e-03f,  -2.954988193e-03f,
            -1.335896709e-02f,  -1.365347486e-02f,  -1.244761918e-02f,  -1.036675313e-02f,  -1.059947727e-02f,  -9.618173201e-03f,
            -7.851140758e-03f,  -8.031216685e-03f,  -7.251513251e-03f,  -5.812129973e-03f,  -5.948693099e-03f,  -5.347639330e-03f,
            -2.178130704e-02f,  -2.207696467e-02f,  -2.061862848e-02f,  -1.707828311e-02f,  -1.731392312e-02f,  -1.611647229e-02f,
            -1.307781748e-02f,  -1.326178831e-02f,  -1.230011532e-02f,  -9.779910143e-03f,  -9.920560236e-03f,  -9.169557567e-03f,
            -2.713914173e-02f,  -2.743344433e-02f,  -2.578998784e-02f,  -2.130572347e-02f,  -2.154055330e-02f,  -2.018474071e-02f,
            -1.633700634e-02f,  -1.652065203e-02f,  -1.542652699e-02f,  -1.223299036e-02f,  -1.237374054e-02f,  -1.151534665e-02f,
            -3.293874478e-02f,  -3.323975198e-02f,  -3.140663864e-02f,  -2.578232011e-02f,  -2.602161534e-02f,  -2.450214286e-02f,
            -1.971384407e-02f,  -1.990053887e-02f,  -1.867034687e-02f,  -1.473331667e-02f,  -1.487652256e-02f,  -1.391125069e-02f,
            -4.127917697e-02f,  -4.158147736e-02f,  -3.951116047e-02f,  -3.248230273e-02f,  -3.272456162e-02f,  -3.100142444e-02f,
            -2.497219722e-02f,  -2.516273914e-02f,  -2.375969147e-02f,  -1.874886042e-02f,  -1.889600994e-02f,  -1.778596157e-02f,
            -4.654136146e-02f,  -4.684203360e-02f,  -4.457957970e-02f,  -3.662991183e-02f,  -3.687114106e-02f,  -3.498395722e-02f,
            -2.816594414e-02f,  -2.835598923e-02f,  -2.681599902e-02f,  -2.114945839e-02f,  -2.129657811e-02f,  -2.007570512e-02f,
            -5.251852246e-02f,  -5.282602910e-02f,  -5.036565810e-02f,  -4.119788709e-02f,  -4.144375342e-02f,  -3.938611251e-02f,
            -3.157654739e-02f,  -3.176986105e-02f,  -3.008918049e-02f,  -2.365450337e-02f,  -2.380435201e-02f,  -2.247486206e-02f,
        };

        float[] gw_expect = new float[] {
            -3.679682713e-02f,  -3.481265842e-02f,  -3.643361687e-02f,  -3.755495184e-02f,  -3.734275823e-02f,  -3.533419716e-02f,
            -3.696765021e-02f,  -3.806978450e-02f,  -3.777591711e-02f,  -3.574487839e-02f,  -3.738836348e-02f,  -3.847146086e-02f,
            -3.516299778e-02f,  -3.322220562e-02f,  -3.475381926e-02f,  -3.585975571e-02f,  -3.560931104e-02f,  -3.364586053e-02f,
            -3.518572479e-02f,  -3.627191129e-02f,  -3.593886089e-02f,  -3.395462111e-02f,  -3.550035983e-02f,  -3.656696693e-02f,
            -3.326275574e-02f,  -3.137019014e-02f,  -3.280950685e-02f,  -3.389139901e-02f,  -3.359418808e-02f,  -3.168056387e-02f,
            -3.312406827e-02f,  -3.418570193e-02f,  -3.380503539e-02f,  -3.187218041e-02f,  -3.331757613e-02f,  -3.435912862e-02f,
            -3.109610101e-02f,  -2.925661197e-02f,  -3.060067963e-02f,  -3.164988173e-02f,  -3.129738937e-02f,  -2.943830717e-02f,
            -3.078268067e-02f,  -3.181115644e-02f,  -3.137444060e-02f,  -2.949755628e-02f,  -3.084001237e-02f,  -3.184794595e-02f,
            -2.967149875e-02f,  -2.790657510e-02f,  -2.917779838e-02f,  -3.002068439e-02f,  -2.930875182e-02f,  -2.753246193e-02f,
            -2.879969103e-02f,  -2.962676582e-02f,  -2.885944752e-02f,  -2.707365359e-02f,  -2.833434255e-02f,  -2.914570542e-02f,
            -2.708081520e-02f,  -2.536801108e-02f,  -2.653376844e-02f,  -2.735001815e-02f,  -2.659014461e-02f,  -2.486743664e-02f,
            -2.602560359e-02f,  -2.682543613e-02f,  -2.600923946e-02f,  -2.427846797e-02f,  -2.542654263e-02f,  -2.621006156e-02f,
            -2.415546734e-02f,  -2.249836267e-02f,  -2.355740627e-02f,  -2.433877558e-02f,  -2.352327478e-02f,  -2.185765327e-02f,
            -2.290561052e-02f,  -2.366998232e-02f,  -2.279727699e-02f,  -2.112495973e-02f,  -2.215936885e-02f,  -2.290685097e-02f,
            -2.089545516e-02f,  -1.929762987e-02f,  -2.024871189e-02f,  -2.098695667e-02f,  -2.010814235e-02f,  -1.850311182e-02f,
            -1.943971182e-02f,  -2.016040439e-02f,  -1.922356012e-02f,  -1.761312888e-02f,  -1.853282119e-02f,  -1.923607366e-02f,
            -1.507670489e-02f,  -1.367972469e-02f,  -1.450802790e-02f,  -1.509275187e-02f,  -1.424428119e-02f,  -1.284595625e-02f,
            -1.365277779e-02f,  -1.422213942e-02f,  -1.332165304e-02f,  -1.192399676e-02f,  -1.270672266e-02f,  -1.326088561e-02f,
            -1.173492727e-02f,  -1.040267160e-02f,  -1.111381192e-02f,  -1.165420759e-02f,  -1.073768186e-02f,  -9.405354379e-03f,
            -1.009145258e-02f,  -1.061609266e-02f,  -9.647075570e-03f,  -8.316662387e-03f,  -8.975165038e-03f,  -9.484220624e-03f,
            -8.044925737e-03f,  -6.781706453e-03f,  -7.373473282e-03f,  -7.861026267e-03f,  -6.868154918e-03f,  -5.606019722e-03f,
            -6.169337184e-03f,  -6.640786023e-03f,  -5.595052256e-03f,  -4.335964394e-03f,  -4.868332951e-03f,  -5.323856203e-03f,
            -4.006700276e-03f,  -2.816829242e-03f,  -3.287011978e-03f,  -3.713207888e-03f,  -2.635700359e-03f,  -1.447952281e-03f,
            -1.886431596e-03f,  -2.296219518e-03f,  -1.165583099e-03f,  1.809722170e-05f,  -3.862263994e-04f,  -7.797923414e-04f,
        };
    }
}
