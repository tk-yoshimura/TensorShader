using Microsoft.VisualStudio.TestTools.UnitTesting;
using TensorShader;
using static TensorShader.Field;

namespace TensorShaderTest.Links.Loss {
    [TestClass]
    public class MultiBoxLossTest {
        [TestMethod]
        public void ReferenceTest() {
            const int elems = 4, classes = 2 + 1, boxes = 25, batches = 2;

            float[] locval = new float[elems * boxes * batches];
            float[] gtval = new float[elems * boxes * batches];

            float[] confval = new float[classes * boxes * batches];
            float[] labelval = new float[boxes * batches]
                { 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0,
                  0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 };

            for (int i = 0; i < boxes * batches; i++) {
                float p = ((i % 7 + 2) * 0.123f) % 1, q = ((i % 8 + 3) * 0.213f) % 1, r = ((i % 16 + 1) * 0.231f) % 1, s = ((i % 32 + 4) * 0.523f) % 1;

                if (labelval[i] != 0) {
                    gtval[i * 4] = p; gtval[i * 4 + 1] = q; gtval[i * 4 + 2] = r; gtval[i * 4 + 3] = s;
                }

                locval[i * 4] = s; locval[i * 4 + 1] = p; locval[i * 4 + 2] = q; locval[i * 4 + 3] = r;

                confval[i * 3] = p / (p + r + s); confval[i * 3 + 1] = r / (p + r + s); confval[i * 3 + 2] = s / (p + r + s);
            }

            ParameterField loc = new Tensor(Shape.Map1D(elems, boxes, batches), locval);
            ParameterField conf = new Tensor(Shape.Map1D(classes, boxes, batches), confval);

            ParameterField gt = new Tensor(Shape.Map1D(elems, boxes, batches), gtval);
            ParameterField label = new Tensor(Shape.Map0D(boxes, batches), labelval);

            (StoreField locloss, StoreField confloss) = MultiBoxLoss(loc, gt, conf, label, hard_negative_mining_rate: 2);
            (Flow flow, _) = Flow.Optimize(locloss, confloss);

            flow.Execute();

            Assert.IsTrue(loc.Grad != null);
            Assert.IsTrue(conf.Grad != null);
            Assert.IsTrue(gt.Grad == null);
            Assert.IsTrue(label.Grad == null);

            float[] locloss_actual = locloss.State;

            AssertError.Tolerance(locloss_expect, locloss_actual, 1e-6f, 1e-4f, $"not equal locloss");

            float[] confloss_actual = confloss.State;

            AssertError.Tolerance(confloss_expect, confloss_actual, 1e-6f, 1e-4f, $"not equal confloss");

            float[] gloc_actual = loc.GradState;

            AssertError.Tolerance(gloc_expect, gloc_actual, 1e-6f, 1e-4f, $"not equal gloc");

            float[] gconf_actual = conf.GradState;

            AssertError.Tolerance(gconf_expect, gconf_actual, 1e-6f, 1e-4f, $"not equal gconf");
        }

        float[] locloss_expect = {
            0.000000000e+00f,  0.000000000e+00f,  5.050270557e-01f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  4.063869715e-01f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  3.756590188e-01f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  1.125227094e+00f,
            0.000000000e+00f,  0.000000000e+00f,  2.215529829e-01f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  1.729250103e-01f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            3.298670352e-01f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  2.922670245e-01f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
        };

        float[] confloss_expect = {
            0.000000000e+00f,  1.179233551e+00f,  9.228392839e-01f,  1.154338956e+00f,  0.000000000e+00f,
            0.000000000e+00f,  1.109030962e+00f,  1.308655858e+00f,  0.000000000e+00f,  1.132665157e+00f,
            0.000000000e+00f,  1.118749857e+00f,  1.174231887e+00f,  0.000000000e+00f,  1.216681480e+00f,
            1.254330039e+00f,  0.000000000e+00f,  1.139117479e+00f,  0.000000000e+00f,  1.439786673e+00f,
            0.000000000e+00f,  1.099993706e+00f,  1.056908250e+00f,  1.115686774e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  1.231369138e+00f,  1.133826375e+00f,
            1.152490258e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            9.387315512e-01f,  0.000000000e+00f,  1.125120401e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  1.292836189e+00f,  1.216595292e+00f,  1.251566529e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  1.303594112e+00f,
        };

        float[] gloc_expect = {
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  -1.787795871e-01f,  2.156465650e-01f,
            -3.171570003e-01f,  2.802900076e-01f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  -3.064157665e-01f,
            2.722794004e-02f,  1.219160929e-01f,  1.572717428e-01f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  -1.851999015e-01f,  1.389938444e-01f,
            1.833216101e-01f,  -1.371155381e-01f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  -9.361889362e-01f,  6.560074091e-01f,  -7.268967628e-01f,  1.007078290e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  5.073563382e-02f,  -1.214110330e-01f,
            6.646589935e-02f,  4.209505394e-03f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  -1.902174763e-02f,  -5.792988092e-02f,  8.127475530e-02f,  -4.323126283e-03f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            1.368948221e-01f,  -1.055574231e-02f,  -2.130941153e-01f,  8.675503731e-02f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  -5.406939983e-02f,
            3.857925534e-02f,  1.584087312e-01f,  -1.429185867e-01f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
        };

        float[] gconf_expect = {
            -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  -8.166023493e-01f,  3.867203295e-01f,
            4.298820198e-01f,  3.150364459e-01f,  -5.561129451e-01f,  2.410765737e-01f,  -7.904152274e-01f,
            4.188022017e-01f,  3.716131449e-01f,  -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  4.470399618e-01f,  -7.431855202e-01f,
            2.961455584e-01f,  -9.550793171e-01f,  4.898180068e-01f,  4.652613103e-01f,  -0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  -7.677505016e-01f,  3.257025480e-01f,  4.420480728e-01f,
            -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  -7.532677650e-01f,  3.707969487e-01f,
            3.824708462e-01f,  5.414766669e-01f,  2.698514163e-01f,  -8.113281727e-01f,  -0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  -8.562864661e-01f,  4.378460944e-01f,  4.184402823e-01f,
            -8.965112567e-01f,  4.213077128e-01f,  4.752035141e-01f,  -0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  -7.744843960e-01f,  3.385323882e-01f,  4.359520972e-01f,  -0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  5.397567153e-01f,  5.588316917e-01f,  -1.098588467e+00f,
            -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  -7.338353395e-01f,  4.463422000e-01f,
            2.874931693e-01f,  3.178642094e-01f,  3.717382252e-01f,  -6.896023750e-01f,  -7.500872612e-01f,
            4.664763808e-01f,  2.836108208e-01f,  -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  -0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  -8.719415665e-01f,
            2.808476388e-01f,  5.910937786e-01f,  4.145266116e-01f,  3.544348776e-01f,  -7.689615488e-01f,
            -7.884770632e-01f,  3.584050834e-01f,  4.300719798e-01f,  -0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  -0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            2.535367012e-01f,  -5.715714097e-01f,  3.180347681e-01f,  -0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  -7.598912716e-01f,  3.416025937e-01f,  4.182886183e-01f,  -0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  4.896952510e-01f,  -9.379640222e-01f,
            4.482689500e-01f,  -8.561946750e-01f,  4.702298641e-01f,  3.859648705e-01f,  -8.935480118e-01f,
            4.385637939e-01f,  4.549841285e-01f,  -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,
            -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  -0.000000000e+00f,  0.000000000e+00f,
            0.000000000e+00f,  -0.000000000e+00f,  0.000000000e+00f,  0.000000000e+00f,  -0.000000000e+00f,
            0.000000000e+00f,  0.000000000e+00f,  -9.495978355e-01f,  4.022288918e-01f,  5.473689437e-01f,
        };
    }
}
